"""
Fixed Trading Bot Main Application
Corrects template rendering and static file issues
"""

from fastapi import FastAPI, Request, HTTPException
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, JSONResponse
import uvicorn
import logging
from pathlib import Path

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize FastAPI app
app = FastAPI(title="Trading Bot Dashboard", version="3.0")

# Initialize templates
templates = Jinja2Templates(directory="templates")

# Mount static files (CSS, JS, images)
if Path("static").exists():
    app.mount("/static", StaticFiles(directory="static"), name="static")
    logger.info("‚úÖ Static files mounted from /static")
else:
    logger.warning("‚ö†Ô∏è Static directory not found")

# Initialize components (with error handling)
try:
    # Import your existing components
    from core.enhanced_trading_engine import EnhancedTradingEngine
    from core.ml_engine import MLEngine
    
    # Initialize engines
    trading_engine = EnhancedTradingEngine()
    ml_engine = MLEngine()
    
    logger.info("‚úÖ Trading and ML engines initialized")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Could not import engines: {e}")
    trading_engine = None
    ml_engine = None
except Exception as e:
    logger.error(f"‚ùå Error initializing engines: {e}")
    trading_engine = None
    ml_engine = None

@app.get("/", response_class=HTMLResponse)
async def dashboard(request: Request):
    """Main dashboard route with full context"""
    try:
        # Get trading status
        if trading_engine:
            status = trading_engine.get_status()
            metrics = {
                "total_value": status.get("total_value", 100000.0),
                "cash_balance": status.get("cash_balance", 100000.0),
                "unrealized_pnl": status.get("unrealized_pnl", 0.0),
                "total_profit": status.get("total_profit", 0.0),
                "num_positions": len(status.get("positions", {}))
            }
            active_strategies = list(status.get("active_strategies", {}).keys())
            bot_status = "RUNNING" if status.get("running", False) else "STOPPED"
        else:
            # Default values when engines not available
            metrics = {
                "total_value": 100000.0,
                "cash_balance": 100000.0, 
                "unrealized_pnl": 0.0,
                "total_profit": 0.0,
                "num_positions": 0
            }
            active_strategies = []
            bot_status = "STOPPED"
        
        # Get ML status
        if ml_engine:
            ml_status = ml_engine.get_status()
        else:
            # Provide default ML status for template
            ml_status = {
                "lorentzian_classifier": {
                    "model_type": "Lorentzian Classifier",
                    "description": "k-NN with Lorentzian distance using RSI, Williams %R, CCI, ADX",
                    "last_trained": "Not trained",
                    "metric_name": "Accuracy",
                    "metric_value_fmt": "N/A",
                    "training_samples": 0
                },
                "neural_network": {
                    "model_type": "Neural Network", 
                    "description": "Deep MLP for price prediction with technical indicators",
                    "last_trained": "Not trained",
                    "metric_name": "MSE",
                    "metric_value_fmt": "N/A",
                    "training_samples": 0
                }
            }
        
        # Available symbols
        symbols = ["BTC/USDT", "ETH/USDT", "ADA/USDT", "DOT/USDT", "LINK/USDT"]
        
        # Template context
        context = {
            "request": request,
            "status": bot_status,
            "metrics": metrics,
            "ml_status": ml_status,
            "active_strategies": active_strategies,
            "symbols": symbols,
            "ai_enabled": ml_engine is not None
        }
        
        logger.info(f"‚úÖ Dashboard rendered with {len(ml_status)} ML models")
        return templates.TemplateResponse("dashboard.html", context)
        
    except Exception as e:
        logger.error(f"‚ùå Dashboard error: {e}")
        # Return error page instead of crashing
        error_html = f"""
        <html><body>
        <h1>Dashboard Error</h1>
        <p>Error loading dashboard: {str(e)}</p>
        <p><a href="/">Try again</a></p>
        </body></html>
        """
        return HTMLResponse(content=error_html, status_code=500)

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "message": "Trading bot server is running",
        "engines": {
            "trading": trading_engine is not None,
            "ml": ml_engine is not None
        }
    }

@app.get("/api/chat")
async def chat_api():
    """Chat API endpoint"""
    return {"message": "Chat API is working"}

# Add other routes here as needed

if __name__ == "__main__":
    print("üöÄ Starting Trading Bot Dashboard...")
    uvicorn.run(
        app, 
        host="0.0.0.0", 
        port=8000, 
        reload=True,
        log_level="info"
    )
