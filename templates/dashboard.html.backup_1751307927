<!--
File: E:\Trade Chat Bot\G Trading Bot\templates\dashboard.html
Location: E:\Trade Chat Bot\G Trading Bot\templates\dashboard.html
Enhanced Dashboard with Trading Pairs and Accurate Market Data
-->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Elite Trading Bot V3.0 - Enhanced Dashboard</title>
    <link rel="stylesheet" href="{{ url_for('static', path='/css/style.css') }}">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        /* General Body and Container Styles */
        body {
            font-family: 'Inter', sans-serif; /* Using Inter as per instructions */
            background-color: #1a1a2e; /* Dark background */
            color: #e0e0e0; /* Light text for contrast */
            margin: 0;
            padding: 0;
            overflow-x: hidden; /* Prevent horizontal scroll */
        }

        .container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 0 20px;
        }

        /* Navbar Styles */
        .navbar {
            background: linear-gradient(90deg, #16213e 0%, #0f3460 100%);
            padding: 15px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
            border-bottom-left-radius: 15px;
            border-bottom-right-radius: 15px;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .nav-brand {
            display: flex;
            align-items: center;
            gap: 10px;
            color: #e94560;
            font-size: 1.5rem;
            font-weight: bold;
        }

        .nav-brand i {
            font-size: 1.8rem;
        }

        .nav-menu {
            display: flex;
            gap: 25px;
        }

        .nav-item {
            color: rgba(255, 255, 255, 0.7);
            text-decoration: none;
            font-weight: 500;
            padding: 10px 15px;
            border-radius: 8px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .nav-item:hover, .nav-item.active {
            color: white;
            background-color: rgba(255, 255, 255, 0.1);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            transform: translateY(-2px);
        }

        /* Section Card Styles (for various content sections) */
        .section-card {
            background: linear-gradient(135deg, #2a2d3a 0%, #3a3f4a 100%);
            border-radius: 16px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            color: #e0e0e0;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding-bottom: 15px;
        }

        .section-header h2 {
            margin: 0;
            font-size: 1.4rem;
            color: #e94560;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .section-actions {
            font-size: 0.9rem;
            color: rgba(255, 255, 255, 0.6);
        }

        .timestamp {
            font-style: italic;
        }

        /* Enhanced Trading Pairs Dropdown Styles */
        .trading-pairs-container {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 8px 32px rgba(102, 126, 234, 0.3);
        }

        .trading-pairs-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
            color: white;
        }

        .trading-pairs-header h3 {
            margin: 0;
            font-size: 1.2rem;
            font-weight: 600;
        }

        .currency-selector {
            display: flex;
            align-items: center;
            gap: 15px;
            flex-wrap: wrap;
        }

        .currency-selector label {
            color: rgba(255, 255, 255, 0.9);
            font-weight: 500;
            font-size: 0.9rem;
        }

        .enhanced-select {
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            color: white;
            padding: 10px 15px;
            font-size: 1rem;
            font-weight: 500;
            min-width: 200px;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }

        .enhanced-select:focus {
            outline: none;
            border-color: rgba(255, 255, 255, 0.6);
            box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.1);
        }

        .enhanced-select option {
            background: #2a2d3a;
            color: white;
            padding: 10px;
        }

        .refresh-btn {
            background: linear-gradient(45deg, #00d4aa, #00b894);
            border: none;
            border-radius: 8px;
            color: white;
            padding: 10px 20px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .refresh-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 212, 170, 0.4);
        }

        .refresh-btn:active {
            transform: translateY(0);
        }

        .refresh-btn.loading {
            opacity: 0.7;
            cursor: not-allowed;
        }

        .refresh-btn.loading i {
            animation: spin 1s linear infinite;
        }

        /* Enhanced Market Data Cards */
        .market-data-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .crypto-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 16px;
            padding: 20px;
            color: white;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .crypto-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, rgba(255,255,255,0.1), transparent);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .crypto-card:hover::before {
            opacity: 1;
        }

        .crypto-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4);
        }

        .crypto-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .crypto-name {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .crypto-rank {
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            font-weight: bold;
        }

        .crypto-symbol {
            font-size: 1.4rem;
            font-weight: bold;
        }

        .crypto-price {
            font-size: 2rem;
            font-weight: bold;
            margin: 10px 0;
        }

        .crypto-change {
            display: flex;
            align-items: center;
            gap: 5px;
            font-weight: 600;
        }

        .crypto-change.positive {
            color: #00ff88;
        }

        .crypto-change.negative {
            color: #ff4757;
        }

        .crypto-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 15px;
            font-size: 0.9rem;
        }

        .stat-item {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 8px 12px;
        }

        .stat-label {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.8rem;
        }

        .stat-value {
            font-weight: 600;
            margin-top: 2px;
        }

        /* Loading Animation */
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .market-data-grid {
            animation: fadeIn 0.6s ease-out;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .currency-selector {
                flex-direction: column;
                align-items: stretch;
            }

            .enhanced-select {
                min-width: auto;
                width: 100%;
            }

            .market-data-grid {
                grid-template-columns: 1fr;
            }

            .crypto-price {
                font-size: 1.5rem;
            }
            .nav-menu {
                flex-direction: column;
                gap: 10px;
                width: 100%;
                text-align: center;
                margin-top: 10px;
            }
            .nav-item {
                width: 100%;
                justify-content: center;
            }
        }

        /* Market Overview Section */
        .market-overview {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            border-radius: 16px;
            padding: 25px;
            margin-bottom: 25px;
            color: white;
        }

        .market-overview h3 {
            margin: 0 0 20px 0;
            font-size: 1.3rem;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .overview-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }

        .overview-stat {
            text-align: center;
        }

        .overview-stat-value {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .overview-stat-label {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
        }

        /* Temporary content for new sections */
        .placeholder-content {
            padding: 20px;
            background-color: #2e3b4e;
            border-radius: 10px;
            margin-top: 15px;
            font-style: italic;
            color: #c0c0c0;
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="nav-brand">
            <i class="fas fa-chart-line"></i>
            <span>Elite Trading Bot V3.0</span>
        </div>
        <div class="nav-menu">
            <!-- Updated hrefs to point to sections with IDs -->
            <a href="#dashboard-section" class="nav-item active" data-section="dashboard-section"><i class="fas fa-home"></i> Dashboard</a>
            <a href="#trading-section" class="nav-item" data-section="trading-section"><i class="fas fa-exchange-alt"></i> Trading</a>
            <a href="#portfolio-section" class="nav-item" data-section="portfolio-section"><i class="fas fa-wallet"></i> Portfolio</a>
            <a href="#analytics-section" class="nav-item" data-section="analytics-section"><i class="fas fa-chart-bar"></i> Analytics</a>
        </div>
    </nav>

    <div class="container">
        <!-- Dashboard Section - Main content for the dashboard -->
        <div id="dashboard-section" class="section-card">
            <!-- Trading Pairs Selection -->
            <div class="trading-pairs-container">
                <div class="trading-pairs-header">
                    <i class="fas fa-coins"></i>
                    <h3>Trading Pairs & Market Data</h3>
                </div>
                <div class="currency-selector">
                    <label for="currencySelect">Select Currency:</label>
                    <select id="currencySelect" class="enhanced-select">
                        <option value="USD" selected>US Dollar (USD)</option>
                        <option value="USDC">USD Coin (USDC)</option>
                        <option value="USDT">Tether (USDT)</option>
                    </select>
                    <button id="refreshMarketData" class="refresh-btn">
                        <i class="fas fa-sync-alt"></i>
                        Refresh Data
                    </button>
                </div>
            </div>

            <!-- Market Overview -->
            <div class="market-overview" id="marketOverview">
                <h3><i class="fas fa-globe"></i> Market Overview</h3>
                <div class="overview-stats">
                    <div class="overview-stat">
                        <div class="overview-stat-value" id="totalMarketCap">$3.41T</div>
                        <div class="overview-stat-label">Total Market Cap</div>
                    </div>
                    <div class="overview-stat">
                        <div class="overview-stat-value" id="btcDominance">62.5%</div>
                        <div class="overview-stat-label">BTC Dominance</div>
                    </div>
                    <div class="overview-stat">
                        <div class="overview-stat-value" id="marketSentiment">Bullish</div>
                        <div class="overview-stat-label">Market Sentiment</div>
                    </div>
                    <div class="overview-stat">
                        <div class="overview-stat-value" id="totalVolume">$68.7B</div>
                        <div class="overview-stat-label">24h Volume</div>
                    </div>
                </div>
            </div>

            <!-- Top 10 Cryptocurrencies Market Data -->
            <div class="section-card">
                <div class="section-header">
                    <h2><i class="fas fa-trophy"></i> Top 10 Cryptocurrencies by Market Cap</h2>
                    <div class="section-actions">
                        <span id="lastUpdated" class="timestamp">Last updated: --</span>
                    </div>
                </div>
                <div id="marketDataGrid" class="market-data-grid">
                    <!-- Market data cards will be populated here -->
                </div>
            </div>

            <!-- ML Training Section (keep your existing content) -->
            {# This Jinja2 'if' block is correctly opened and closed. #}
            {% if ml_status %}
            <div class="section-card">
                <div class="section-header">
                    <h2><i class="fas fa-brain"></i> ML Model Training</h2>
                </div>
                <div class="placeholder-content">
                    Content for ML Model Training will go here. This section is conditionally displayed.
                </div>
                <!-- Your existing ML training content would be here -->
            </div>
            {% endif %} {# End of ml_status if block #}
        </div> <!-- End of Dashboard Section -->

        <!-- Trading Section -->
        <div id="trading-section" class="section-card" style="display: none;">
            <div class="section-header">
                <h2><i class="fas fa-exchange-alt"></i> Trading Interface</h2>
            </div>
            <div class="placeholder-content">
                This is the content for the Trading section. Here you can place order forms, trade history, live positions, etc.
            </div>
        </div>

        <!-- Portfolio Section -->
        <div id="portfolio-section" class="section-card" style="display: none;">
            <div class="section-header">
                <h2><i class="fas fa-wallet"></i> Portfolio Performance</h2>
            </div>
            <div class="placeholder-content">
                This is the content for the Portfolio section. Here you can display your assets, performance charts, and allocation.
            </div>
            <!-- Your existing portfolio content would be here (if any was inside the {% if metrics %} block) -->
        </div>

        <!-- Analytics Section -->
        <div id="analytics-section" class="section-card" style="display: none;">
            <div class="section-header">
                <h2><i class="fas fa-chart-bar"></i> Analytics & Insights</h2>
            </div>
            <div class="placeholder-content">
                This is the content for the Analytics section. Here you can place detailed performance metrics, backtesting results visualizations, and deep insights.
            </div>
        </div>

    </div>

    <script>
        // Enhanced Market Data Management (Your existing class)
        class EnhancedMarketData {
            constructor() {
                this.currentCurrency = 'USD';
                this.updateInterval = null;
                this.init();
            }

            init() {
                this.setupEventListeners();
                this.loadInitialData();
                this.startAutoRefresh();
            }

            setupEventListeners() {
                // Currency selector change
                document.getElementById('currencySelect').addEventListener('change', (e) => {
                    this.currentCurrency = e.target.value;
                    this.refreshMarketData();
                });

                // Manual refresh button
                document.getElementById('refreshMarketData').addEventListener('click', () => {
                    this.refreshMarketData();
                });
            }

            async loadInitialData() {
                console.log('[MarketData] Loading initial data...');
                await this.refreshMarketData();
            }

            async refreshMarketData() {
                console.log('[MarketData] Refreshing market data...');
                const refreshBtn = document.getElementById('refreshMarketData');
                const grid = document.getElementById('marketDataGrid');
                
                let responseText = ''; // To store raw response for debugging

                try {
                    // Show loading state
                    refreshBtn.classList.add('loading');
                    refreshBtn.querySelector('i').classList.add('fa-spin');
                    
                    // Fetch market data
                    const currency = this.currentCurrency.toLowerCase();
                    const apiUrl = `${window.location.origin}/api/market-data?currency=${currency}`;
                    console.log(`[MarketData] Fetching from: ${apiUrl}`);
                    const response = await fetch(apiUrl);

                    // Check if response is OK (status 200)
                    if (!response.ok) {
                        responseText = await response.text(); // Capture raw text on non-OK response
                        console.error(`[MarketData] HTTP error! Status: ${response.status}. Raw response text:`, responseText);
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }

                    const data = await response.json();
                    console.log('[MarketData] Received JSON data:', data);
                    
                    if (data.success) {
                        this.renderMarketData(data);
                        this.updateLastRefreshed();
                        this.showAlert('Market data updated successfully!', 'success');
                    } else {
                        // If backend returns success: false, but still valid JSON
                        console.error('[MarketData] Backend reported data fetch failure:', data.error);
                        throw new Error(data.error || 'Failed to fetch market data (backend reported error)');
                    }
                    
                } catch (error) {
                    console.error('Market data error:', error);
                    // Log raw response text if available (from non-OK response)
                    if (responseText) {
                        console.error('[MarketData] Raw response text on JSON parse failure:', responseText);
                    } else if (error instanceof SyntaxError) {
                        // If it's a SyntaxError, it means response was not valid JSON,
                        // so we try to read it as text to debug.
                        try {
                            const rawResponse = await fetch(`${window.location.origin}/api/market-data?currency=${this.currentCurrency.toLowerCase()}`);
                            const rawText = await rawResponse.text();
                            console.error('[MarketData] Raw response text on SyntaxError (re-fetch):', rawText);
                        } catch (reFetchError) {
                            console.error('[MarketData] Failed to re-fetch raw response text:', reFetchError);
                        }
                    }

                    this.showAlert('Failed to update market data. Using cached data.', 'warning');
                    this.renderFallbackData();
                    
                } finally {
                    // Remove loading state
                    refreshBtn.classList.remove('loading');
                    refreshBtn.querySelector('i').classList.remove('fa-spin');
                }
            }

            renderMarketData(data) {
                const grid = document.getElementById('marketDataGrid');
                const symbols = data.symbols || {};
                
                // Convert symbols object to array format for easier handling
                const cryptoArray = Object.entries(symbols).map(([symbol, info]) => ({
                    symbol,
                    ...info
                })).sort((a, b) => (a.rank || 0) - (b.rank || 0));
                
                grid.innerHTML = cryptoArray.map(crypto => this.createCryptoCard(crypto)).join('');
                
                // Update market overview if available
                if (data.market_overview) {
                    this.updateMarketOverview(data.market_overview);
                }
            }

            createCryptoCard(crypto) {
                const changeClass = crypto.change >= 0 ? 'positive' : 'negative';
                const changeIcon = crypto.change >= 0 ? 'fa-arrow-up' : 'fa-arrow-down';
                const formattedPrice = this.formatPrice(crypto.price);
                const formattedChange = Math.abs(crypto.change).toFixed(2);
                const formattedVolume = this.formatLargeNumber(crypto.volume);
                const formattedMarketCap = this.formatLargeNumber(crypto.market_cap);

                return `
                    <div class="crypto-card" data-symbol="${crypto.symbol}">
                        <div class="crypto-header">
                            <div class="crypto-name">
                                <div class="crypto-rank">${crypto.rank || '?'}</div>
                                <div>
                                    <div class="crypto-symbol">${crypto.symbol}</div>
                                    <div style="font-size: 0.9rem; opacity: 0.8;">${crypto.name || crypto.symbol}</div>
                                </div>
                            </div>
                        </div>
                        <div class="crypto-price">${formattedPrice}</div>
                        <div class="crypto-change ${changeClass}">
                            <i class="fas ${changeIcon}"></i>
                            ${formattedChange}%
                        </div>
                        <div class="crypto-stats">
                            <div class="stat-item">
                                <div class="stat-label">24h Volume</div>
                                <div class="stat-value">${formattedVolume}</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-label">Market Cap</div>
                                <div class="stat-value">${formattedMarketCap}</div>
                            </div>
                        </div>
                    </div>
                `;
            }

            renderFallbackData() {
                console.log('[MarketData] Rendering fallback data.');
                const fallbackData = {
                    'BTC': { price: 97500.00, change: 2.5, volume: 28000000000, market_cap: 1920000000000, rank: 1, name: 'Bitcoin' },
                    'ETH': { price: 2720.00, change: 1.8, volume: 15000000000, market_cap: 327000000000, rank: 2, name: 'Ethereum' },
                    'USDT': { price: 1.00, change: 0.1, volume: 45000000000, market_cap: 140000000000, rank: 3, name: 'Tether' },
                    'SOL': { price: 205.00, change: -0.5, volume: 2500000000, market_cap: 96000000000, rank: 4, name: 'Solana' },
                    'BNB': { price: 575.00, change: 0.8, volume: 1800000000, market_cap: 83000000000, rank: 5, name: 'BNB' },
                    'XRP': { price: 0.52, change: 3.2, volume: 2100000000, market_cap: 29000000000, rank: 6, name: 'XRP' },
                    'USDC': { price: 1.00, change: 0.0, volume: 8500000000, market_cap: 34000000000, rank: 7, name: 'USD Coin' },
                    'DOGE': { price: 0.08, change: -1.2, volume: 850000000, market_cap: 12000000000, rank: 8, name: 'Dogecoin' },
                    'ADA': { price: 0.35, change: 1.5, volume: 400000000, market_cap: 12500000000, rank: 9, name: 'Cardano' },
                    'AVAX': { price: 25.50, change: 2.1, volume: 350000000, market_cap: 10400000000, rank: 10, name: 'Avalanche' }
                };

                this.renderMarketData({ success: true, symbols: fallbackData });
            }

            updateMarketOverview(overview) {
                document.getElementById('totalMarketCap').textContent = this.formatLargeNumber(overview.total_market_cap);
                document.getElementById('btcDominance').textContent = `${overview.btc_dominance.toFixed(1)}%`;
                document.getElementById('marketSentiment').textContent = overview.market_sentiment;
                document.getElementById('totalVolume').textContent = this.formatLargeNumber(overview.total_volume_24h);
            }

            formatPrice(price) {
                const currency = this.currentCurrency;
                if (price >= 1000) {
                    return `${currency === 'USD' ? '$' : ''}${price.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
                } else if (price >= 1) {
                    return `${currency === 'USD' ? '$' : ''}${price.toFixed(2)}`;
                } else {
                    return `${currency === 'USD' ? '$' : ''}${price.toFixed(4)}`;
                }
            }

            formatLargeNumber(num) {
                if (num >= 1e12) return `$${(num / 1e12).toFixed(2)}T`;
                if (num >= 1e9) return `$${(num / 1e9).toFixed(2)}B`;
                if (num >= 1e6) return `$${(num / 1e6).toFixed(2)}M`;
                if (num >= 1e3) return `$${(num / 1e3).toFixed(2)}K`;
                return `$${num.toFixed(2)}`;
            }

            updateLastRefreshed() {
                const now = new Date();
                document.getElementById('lastUpdated').textContent =
                    `Last updated: ${now.toLocaleTimeString()}`;
            }

            startAutoRefresh() {
                // Refresh every 30 seconds
                this.updateInterval = setInterval(() => {
                    this.refreshMarketData();
                }, 30000);
            }

            showAlert(message, type = 'info') {
                // Create alert if it doesn't exist
                let alert = document.getElementById('marketAlert');
                if (!alert) {
                    alert = document.createElement('div');
                    alert.id = 'marketAlert';
                    alert.style.cssText = `
                        position: fixed;
                        top: 20px;
                        right: 20px;
                        padding: 12px 20px;
                        border-radius: 8px;
                        color: white;
                        font-weight: 500;
                        z-index: 1000;
                        opacity: 0;
                        transition: opacity 0.3s ease;
                    `;
                    document.body.appendChild(alert);
                }

                // Set alert style based on type
                const colors = {
                    success: '#00d4aa',
                    warning: '#fdcb6e',
                    error: '#e74c3c',
                    info: '#74b9ff'
                };
                alert.style.backgroundColor = colors[type] || colors.info;
                alert.textContent = message;
                
                // Show alert
                alert.style.opacity = '1';
                
                // Hide after 3 seconds
                setTimeout(() => {
                    alert.style.opacity = '0';
                }, 3000);
            }
        }

        // --- JAVASCRIPT FOR NAVIGATION ---
        class NavigationManager {
            constructor() {
                console.log('[NavigationManager] Constructor called.');
                this.navItems = document.querySelectorAll('.nav-item');
                // Selects direct children of .container that are .section-card
                this.sections = document.querySelectorAll('.container > .section-card'); 
                console.log(`[NavigationManager] Found ${this.navItems.length} navigation items.`);
                console.log(`[NavigationManager] Found ${this.sections.length} section cards.`);
                this.init();
            }

            init() {
                console.log('[NavigationManager] init() called.');
                this.setupEventListeners();
                const defaultSectionId = this.getDefaultSectionId();
                this.showSection(defaultSectionId); 
                this.updateActiveNavLink(defaultSectionId);
            }

            setupEventListeners() {
                console.log('[NavigationManager] Setting up event listeners.');
                this.navItems.forEach(item => {
                    item.addEventListener('click', (event) => {
                        event.preventDefault(); 
                        const targetId = item.getAttribute('data-section');
                        console.log(`[NavigationManager] Nav item clicked. Target section ID: ${targetId}`);
                        this.showSection(targetId);
                        this.updateActiveNavLink(targetId);
                        // Optional: Smooth scroll to the top of the displayed section
                        document.getElementById(targetId).scrollIntoView({ behavior: 'smooth', block: 'start' });
                    });
                });
            }

            getDefaultSectionId() {
                const hash = window.location.hash;
                if (hash && document.getElementById(hash.substring(1))) {
                    console.log(`[NavigationManager] Default section from hash: ${hash.substring(1)}`);
                    return hash.substring(1);
                }
                console.log('[NavigationManager] Defaulting to dashboard-section.');
                return 'dashboard-section';
            }

            showSection(sectionIdToShow) {
                console.log(`[NavigationManager] Attempting to show section: ${sectionIdToShow}`);
                this.sections.forEach(section => {
                    if (section.id === sectionIdToShow) {
                        section.style.display = 'block'; 
                        console.log(`[NavigationManager] Showing section: #${section.id}`);
                    } else {
                        section.style.display = 'none'; 
                        console.log(`[NavigationManager] Hiding section: #${section.id}`);
                    }
                });
            }

            updateActiveNavLink(activeSectionId) {
                console.log(`[NavigationManager] Updating active nav link for: ${activeSectionId}`);
                this.navItems.forEach(item => {
                    if (item.getAttribute('data-section') === activeSectionId) {
                        item.classList.add('active');
                    } else {
                        item.classList.remove('active');
                    }
                });
            }
        }
        // --- END JAVASCRIPT FOR NAVIGATION ---


        // Initialize enhanced market data when page loads
        document.addEventListener('DOMContentLoaded', () => {
            window.marketData = new EnhancedMarketData();
            window.navigationManager = new NavigationManager(); // Initialize navigation
        });

        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
            if (window.marketData && window.marketData.updateInterval) {
                clearInterval(window.marketData.updateInterval);
            }
        });
    </script>
</body>
</html>
