"""
File: main.py
Location: E:\Trade Chat Bot\G Trading Bot\main.py

Minimal Working Main - Emergency Recovery
"""

from fastapi import FastAPI, Request, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from dotenv import load_dotenv
import os
import json
import logging
from datetime import datetime

# Load environment variables
load_dotenv()

# Initialize FastAPI app
app = FastAPI(
    title="Elite Trading Bot V3.0",
    description="Industrial Crypto Trading Bot",
    version="3.0.0"
)

# Setup static files and templates
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# Initialize logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Global variables
active_connections = []

@app.get("/", response_class=HTMLResponse)
async def dashboard(request: Request):
    """Main dashboard"""
    return templates.TemplateResponse("dashboard.html", {
        "request": request,
        "ml_status": {
            "models": [
                {"name": "Lorentzian Classifier", "status": "available"},
                {"name": "Neural Network", "status": "available"},
                {"name": "Social Sentiment", "status": "available"},
                {"name": "Risk Assessment", "status": "available"}
            ]
        },
        "status": "RUNNING"
    })

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "components": {
            "server": True,
            "ml_engine": True,
            "chat_manager": True
        },
        "timestamp": datetime.now().isoformat()
    }

@app.post("/api/chat")
async def chat_endpoint(request: Request):
    """Chat API endpoint"""
    try:
        data = await request.json()
        message = data.get("message", "")
        
        # Simple response for now
        response = f"I received your message: '{message}'. I'm working on providing better responses!"
        
        return {
            "response": response,
            "message_type": "text",
            "intent": "general_chat",
            "response_time": 0.1
        }
    except Exception as e:
        return {"error": str(e)}, 500

@app.get("/chat", response_class=HTMLResponse)
async def chat_page(request: Request):
    """Chat interface page"""
    return templates.TemplateResponse("chat.html", {"request": request})

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket endpoint for real-time communication"""
    await websocket.accept()
    active_connections.append(websocket)
    
    try:
        while True:
            data = await websocket.receive_text()
            message_data = json.loads(data)
            
            # Echo back for now
            response = {
                "type": "chat_response",
                "response": f"WebSocket received: {message_data.get('message', '')}",
                "timestamp": datetime.now().isoformat()
            }
            
            await websocket.send_text(json.dumps(response))
            
    except WebSocketDisconnect:
        active_connections.remove(websocket)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
