================================================================================
ELITE TRADING BOT V3.0 - STARTUP COMMANDS GUIDE
================================================================================

File: startup_commands_guide.txt
Location: E:\Trade Chat Bot\G Trading Bot\startup_commands_guide.txt
Updated: June 29, 2025

This document provides comprehensive startup options for your Elite Trading Bot
with detailed explanations of each command and when to use them.

================================================================================
BASIC STARTUP COMMANDS
================================================================================

1. SIMPLE STARTUP (Your Current Method)
   Command: python -m uvicorn main:app --host 0.0.0.0 --port 8000
   
   What it does:
   - Starts the bot on all network interfaces (0.0.0.0)
   - Uses port 8000 (accessible via http://localhost:8000)
   - No auto-reload (you must restart manually after code changes)
   - Basic logging level
   
   Best for: Quick testing, production deployment


2. DEVELOPMENT MODE (Recommended for Development)
   Command: python -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload
   
   What it does:
   - Automatically restarts when you change code files
   - Watches for file changes in your project directory
   - Saves development time - no manual restarts needed
   - Same network access as basic startup
   
   Best for: Active development, testing new features


3. ENHANCED DEVELOPMENT MODE
   Command: python -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload --log-level info
   
   What it does:
   - All benefits of development mode
   - Enhanced logging with INFO level details
   - Shows request information, startup messages
   - Better debugging information
   
   Best for: Development with detailed logging

================================================================================
PRODUCTION STARTUP COMMANDS
================================================================================

4. PRODUCTION MODE (Optimized Performance)
   Command: python -m uvicorn main:app --host 0.0.0.0 --port 8000 --workers 1 --log-level warning
   
   What it does:
   - Optimized for production use
   - Reduced logging (warnings and errors only)
   - Single worker process (suitable for most trading bots)
   - No auto-reload for stability
   - Better performance and security
   
   Best for: Live trading, production deployment


5. HIGH-PERFORMANCE PRODUCTION
   Command: python -m uvicorn main:app --host 0.0.0.0 --port 8000 --workers 2 --log-level error
   
   What it does:
   - Multiple worker processes for better performance
   - Minimal logging (errors only)
   - Can handle more concurrent users
   - Maximum performance optimization
   
   Best for: High-traffic production environments


6. SECURE PRODUCTION (with SSL)
   Command: python -m uvicorn main:app --host 0.0.0.0 --port 443 --ssl-keyfile=key.pem --ssl-certfile=cert.pem
   
   What it does:
   - Enables HTTPS encryption
   - Requires SSL certificates (key.pem and cert.pem files)
   - Uses port 443 (standard HTTPS port)
   - Secure data transmission
   
   Best for: Public-facing production with sensitive data
   Note: Requires SSL certificates

================================================================================
DEBUGGING AND TROUBLESHOOTING COMMANDS
================================================================================

7. DEBUG MODE (Maximum Information)
   Command: python -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload --log-level debug
   
   What it does:
   - Shows ALL logging information (very detailed)
   - Includes database queries, API calls, internal operations
   - Auto-reload for development
   - Helps identify issues and bottlenecks
   
   Best for: Troubleshooting problems, deep debugging


8. VERBOSE DEVELOPMENT MODE
   Command: python -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload --access-log --use-colors
   
   What it does:
   - Shows HTTP access logs (every request)
   - Colored output for better readability
   - Auto-reload for development
   - Full visibility into web traffic
   
   Best for: Web development, API testing


9. LOCALHOST ONLY (Security Testing)
   Command: python -m uvicorn main:app --host 127.0.0.1 --port 8000 --reload
   
   What it does:
   - Only accessible from the local machine
   - Blocks external network access
   - Good for security testing
   - Prevents accidental external exposure
   
   Best for: Local testing, security validation

================================================================================
ADVANCED STARTUP OPTIONS
================================================================================

10. CUSTOM PORT (Avoid Conflicts)
    Command: python -m uvicorn main:app --host 0.0.0.0 --port 8080 --reload
    
    What it does:
    - Uses port 8080 instead of 8000
    - Useful if port 8000 is already in use
    - Access via http://localhost:8080
    
    Best for: Multiple applications, port conflicts


11. MULTIPLE WORKERS (Scale Up)
    Command: python -m uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4
    
    What it does:
    - Runs 4 worker processes simultaneously
    - Better performance for multiple users
    - Utilizes multiple CPU cores
    - Note: May use more memory
    
    Best for: High-traffic scenarios, multiple users


12. MEMORY OPTIMIZED
    Command: python -m uvicorn main:app --host 0.0.0.0 --port 8000 --worker-class uvicorn.workers.UvicornWorker
    
    What it does:
    - Uses optimized worker class
    - Better memory management
    - Improved stability for long-running processes
    
    Best for: 24/7 trading bots, memory-constrained systems

================================================================================
ENVIRONMENT-SPECIFIC COMMANDS
================================================================================

13. WITH ENVIRONMENT VARIABLES (Windows)
    Commands:
    set ENVIRONMENT=development
    set LOG_LEVEL=INFO
    set PORT=8000
    python -m uvicorn main:app --host 0.0.0.0 --port %PORT% --reload
    
    What it does:
    - Uses environment variables for configuration
    - Flexible settings without code changes
    - Easy to switch between development/production
    
    Best for: Flexible deployment, configuration management


14. WITH .ENV FILE
    Create .env file with:
    ENVIRONMENT=development
    LOG_LEVEL=INFO
    PORT=8000
    CORS_ORIGINS=*
    
    Command: python -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    
    What it does:
    - Automatically loads settings from .env file
    - Clean separation of configuration and code
    - Easy to manage different environments
    
    Best for: Professional development, team projects

================================================================================
MONITORING AND LOGGING OPTIONS
================================================================================

15. WITH LOG FILE OUTPUT
    Command: python -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload --log-config logging.json
    
    What it does:
    - Uses custom logging configuration
    - Can output logs to files
    - Structured logging for analysis
    
    Best for: Production monitoring, log analysis


16. PERFORMANCE MONITORING
    Command: python -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload --access-log
    
    What it does:
    - Logs every HTTP request with timing
    - Shows response times and status codes
    - Helps identify slow endpoints
    
    Best for: Performance optimization, bottleneck identification

================================================================================
COMMAND PARAMETER EXPLANATIONS
================================================================================

--host 0.0.0.0
    Makes the bot accessible from any network interface
    Use 127.0.0.1 for localhost-only access

--port 8000
    Specifies the port number
    Common alternatives: 8080, 3000, 5000

--reload
    Automatically restarts when code changes
    ONLY use in development, NOT in production

--workers N
    Number of worker processes
    More workers = better performance but more memory usage

--log-level [debug|info|warning|error|critical]
    Controls how much logging information is shown
    debug = everything, error = only errors

--access-log
    Shows HTTP access logs (every request)
    Useful for monitoring and debugging

--use-colors
    Adds colors to log output for better readability
    Works best in modern terminals

--ssl-keyfile / --ssl-certfile
    Enables HTTPS with SSL certificates
    Requires valid certificate files

================================================================================
RECOMMENDED STARTUP WORKFLOWS
================================================================================

FOR DEVELOPMENT:
1. Start with: python -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload
2. If debugging: Add --log-level debug
3. If monitoring performance: Add --access-log

FOR TESTING:
1. Use: python -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload --log-level info
2. Monitor logs for any issues
3. Test all endpoints and features

FOR PRODUCTION:
1. Start with: python -m uvicorn main:app --host 0.0.0.0 --port 8000 --log-level warning
2. Add --workers 2 if needed for performance
3. Consider SSL certificates for security

================================================================================
TROUBLESHOOTING COMMON STARTUP ISSUES
================================================================================

ISSUE: "Address already in use"
SOLUTION: 
- Change port: --port 8080
- Kill existing process: netstat -ano | findstr :8000
- Or restart your computer

ISSUE: "Permission denied on port 80/443"
SOLUTION:
- Use ports > 1024 (like 8000, 8080)
- Or run as administrator (not recommended)

ISSUE: Bot not accessible from other computers
SOLUTION:
- Use --host 0.0.0.0 (not 127.0.0.1)
- Check firewall settings
- Ensure router allows the port

ISSUE: Changes not reflected
SOLUTION:
- Add --reload flag for development
- Clear browser cache
- Check file save status

================================================================================
PERFORMANCE OPTIMIZATION TIPS
================================================================================

1. For CPU-intensive trading algorithms:
   Use --workers equal to your CPU core count

2. For memory-constrained systems:
   Use single worker: --workers 1

3. For high-frequency trading:
   Use --log-level error to minimize I/O

4. For 24/7 operation:
   Use production mode without --reload

5. For multiple users:
   Scale workers: --workers 2-4

================================================================================
SECURITY CONSIDERATIONS
================================================================================

DEVELOPMENT (Local Only):
- Use --host 127.0.0.1 for maximum security
- Keep --reload enabled for convenience

PRODUCTION (Public Access):
- Use --host 0.0.0.0 only if needed
- Always use --log-level warning or higher
- Consider SSL certificates
- Implement proper firewall rules

TESTING:
- Use non-standard ports to avoid conflicts
- Monitor logs for suspicious activity
- Test with --access-log enabled

================================================================================
EXAMPLE STARTUP SCRIPTS
================================================================================

DEVELOPMENT SCRIPT (start_dev.bat):
@echo off
echo Starting Elite Trading Bot V3.0 - Development Mode
set ENVIRONMENT=development
set LOG_LEVEL=INFO
python -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload --log-level info
pause

PRODUCTION SCRIPT (start_prod.bat):
@echo off
echo Starting Elite Trading Bot V3.0 - Production Mode
set ENVIRONMENT=production
set LOG_LEVEL=WARNING
python -m uvicorn main:app --host 0.0.0.0 --port 8000 --workers 1 --log-level warning
pause

DEBUG SCRIPT (start_debug.bat):
@echo off
echo Starting Elite Trading Bot V3.0 - Debug Mode
set ENVIRONMENT=development
set LOG_LEVEL=DEBUG
python -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload --log-level debug --access-log
pause

================================================================================
MONITORING YOUR RUNNING BOT
================================================================================

After starting your bot, monitor these URLs:

Health Check:
http://localhost:8000/health

Detailed System Status:
http://localhost:8000/health/detailed

Performance Metrics:
http://localhost:8000/api/system/performance

API Documentation (Development only):
http://localhost:8000/api/docs

Main Dashboard:
http://localhost:8000/

================================================================================
CONCLUSION
================================================================================

Choose the startup command that best fits your current needs:

🔧 DEVELOPMENT: --reload --log-level info
🚀 PRODUCTION: --workers 1 --log-level warning  
🐛 DEBUGGING: --reload --log-level debug --access-log
🔒 SECURE: --ssl-keyfile --ssl-certfile

Your Elite Trading Bot V3.0 is designed to work optimally with any of these
configurations. Start with development mode and progress to production as
your needs evolve.

Happy Trading! 🚀💰📊

================================================================================
END OF GUIDE
================================================================================