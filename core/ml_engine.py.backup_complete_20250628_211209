"""
ML Engine Bridge for Compatibility
=================================
"""

import logging
from typing import Dict, Any

try:
    from core.enhanced_ml_engine import AdaptiveMLEngine
    
    class MLEngine(AdaptiveMLEngine):
        """ML Engine wrapper for compatibility"""
        
        def __init__(self, config=None):
            super().__init__(
                model_save_path='models/',
                performance_log_path='logs/'
            )
            self.config = config
            self.logger = logging.getLogger(__name__)
            self.logger.info("ML Engine bridge initialized")
        
        async def analyze_symbol(self, symbol: str, timeframe: str) -> Dict[str, Any]:
            """Enhanced analyze_symbol for chat integration"""
            return await super().analyze_symbol(symbol, timeframe)
    
    class OctoBotMLEngine(MLEngine):
        """OctoBot compatibility wrapper"""
        pass

except ImportError as e:
    import logging
    
    class MLEngine:
        def __init__(self, config=None):
            self.config = config
            self.logger = logging.getLogger(__name__)
            self.logger.info("Basic ML Engine initialized")
        
        async def analyze_symbol(self, symbol: str, timeframe: str):
            return {
                'trend': 'NEUTRAL', 'signal': 'HOLD', 'confidence': 0.5,
                'recommendation': f'Basic analysis for {symbol}'
            }
    
    class OctoBotMLEngine(MLEngine):
        pass

__all__ = ['MLEngine', 'OctoBotMLEngine']
