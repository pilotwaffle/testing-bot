// static/js/chat.js - DEBUG VERSION with extensive logging
// Fixes "Error: undefined" by handling all response formats properly

let ws = null;
const chatMessagesContainer = document.getElementById('chat-messages');
const chatInput = document.getElementById('chat-input');

console.log('🚀 Debug Chat.js loading...');
console.log('📊 Chat container found:', !!chatMessagesContainer);
console.log('📊 Chat input found:', !!chatInput);

// Enhanced WebSocket connection with debug logging
function connectWebSocket() {
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const wsUrl = `${protocol}//${window.location.host}/ws`;
    
    console.log('🔌 Connecting to WebSocket:', wsUrl);
    ws = new WebSocket(wsUrl);

    ws.onopen = () => {
        console.log('✅ WebSocket connected successfully');
        addMessage('System', 'Connected to enhanced trading bot AI.', 'notification');
    };

    ws.onmessage = (event) => {
        console.log('📨 Raw WebSocket message:', event.data);
        
        try {
            const data = JSON.parse(event.data);
            console.log('📊 Parsed WebSocket data:', data);
            handleWebSocketMessage(data);
        } catch (e) {
            console.error('❌ WebSocket JSON parse error:', e);
            console.log('📄 Raw data that failed to parse:', event.data);
            addMessage('Bot', event.data || 'Received message but could not parse it.');
        }
    };

    ws.onclose = (event) => {
        console.warn('🔌 WebSocket disconnected. Code:', event.code, 'Reason:', event.reason);
        addMessage('System', 'Disconnected from bot. Reconnecting...', 'notification');
        setTimeout(connectWebSocket, 3000);
    };

    ws.onerror = (error) => {
        console.error('❌ WebSocket error:', error);
        addMessage('System', 'WebSocket connection error. Using HTTP fallback.', 'error');
    };
}

function handleWebSocketMessage(data) {
    console.log('🔍 Processing WebSocket message type:', data.type);
    console.log('🔍 Full message data:', data);
    
    try {
        switch(data.type) {
            case 'chat_response':
                console.log('💬 Handling chat response');
                handleChatResponse(data);
                break;
            case 'pong':
                console.log('🏓 Pong received');
                break;
            default:
                console.log('🤔 Unknown message type:', data.type);
                if (data.response || data.message) {
                    // Treat as chat response
                    handleChatResponse(data);
                }
        }
    } catch (error) {
        console.error('❌ Error handling WebSocket message:', error);
        addMessage('Error', 'Failed to process server message: ' + error.message, 'error');
    }
}

function handleChatResponse(data) {
    console.log('💬 Processing chat response:', data);
    
    try {
        // Multiple fallbacks for response content
        let responseContent = null;
        
        // Try different possible response fields
        if (data.response) {
            responseContent = data.response;
            console.log('✅ Found response in data.response');
        } else if (data.message) {
            responseContent = data.message;
            console.log('✅ Found response in data.message');
        } else if (data.content) {
            responseContent = data.content;
            console.log('✅ Found response in data.content');
        } else if (typeof data === 'string') {
            responseContent = data;
            console.log('✅ Using data as string response');
        } else {
            console.error('❌ No response content found in:', data);
            responseContent = 'Sorry, I received a response but could not extract the content.';
        }
        
        // Handle undefined or null responses
        if (!responseContent || responseContent === 'undefined' || responseContent === null) {
            console.warn('⚠️ Response content is undefined/null:', responseContent);
            responseContent = 'Sorry, I encountered an issue processing your request. Please try again.';
        }
        
        console.log('📝 Final response content:', responseContent);
        
        // Add message to chat
        addMessage('Bot', responseContent);
        
    } catch (error) {
        console.error('❌ Error in handleChatResponse:', error);
        addMessage('Error', 'Failed to display chat response: ' + error.message, 'error');
    }
}

// Enhanced message sending with extensive debugging
async function sendMessage() {
    const message = chatInput.value.trim();
    if (!message) {
        console.warn('⚠️ No message to send');
        return;
    }

    console.log('📤 Sending message:', message);
    
    addMessage('You', message);
    chatInput.value = '';

    const startTime = performance.now();

    // Try WebSocket first
    if (ws && ws.readyState === WebSocket.OPEN) {
        console.log('📡 Sending via WebSocket');
        try {
            const messageData = { 
                type: 'chat', 
                message: message,
                timestamp: new Date().toISOString(),
                session_id: getSessionId()
            };
            
            console.log('📡 WebSocket message data:', messageData);
            ws.send(JSON.stringify(messageData));
            console.log('✅ Message sent via WebSocket');
            
        } catch (error) {
            console.error('❌ WebSocket send error:', error);
            sendMessageHTTP(message, startTime);
        }
    } else {
        console.log('🌐 WebSocket not available, using HTTP');
        sendMessageHTTP(message, startTime);
    }
}

async function sendMessageHTTP(message, startTime) {
    console.log('📡 Sending via HTTP API');
    
    try {
        const requestData = { 
            message: message,
            timestamp: new Date().toISOString(),
            session_id: getSessionId()
        };
        
        console.log('📡 HTTP request data:', requestData);
        
        const response = await fetch('/api/chat', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(requestData)
        });
        
        console.log('📡 HTTP response status:', response.status);
        console.log('📡 HTTP response headers:', response.headers);
        
        if (response.ok) {
            try {
                const responseText = await response.text();
                console.log('📡 HTTP raw response text:', responseText);
                
                const data = JSON.parse(responseText);
                console.log('📡 HTTP parsed response data:', data);
                
                // Calculate response time
                const endTime = performance.now();
                data.response_time = (endTime - startTime) / 1000;
                
                // Handle as chat response
                handleChatResponse(data);
                
            } catch (jsonError) {
                console.error('❌ JSON parse error:', jsonError);
                const textResponse = await response.text();
                console.log('📄 Raw response that failed to parse:', textResponse);
                addMessage('Error', 'Received invalid response from server', 'error');
            }
        } else {
            console.error('❌ HTTP error:', response.status);
            const errorText = await response.text();
            console.log('📄 Error response:', errorText);
            addMessage('Error', `Server error: ${response.status}`, 'error');
        }
    } catch (error) {
        console.error('❌ HTTP request error:', error);
        addMessage('Error', `Connection error: ${error.message}`, 'error');
    }
}

// Enhanced message adding with debug logging
function addMessage(sender, content, messageType = 'text') {
    console.log('💬 Adding message:', { sender, content, messageType });
    
    if (!chatMessagesContainer) {
        console.error('❌ Chat messages container not found');
        return;
    }
    
    try {
        // Ensure content is valid
        if (!content || content === 'undefined' || content === null) {
            console.warn('⚠️ Invalid message content:', content);
            content = 'Message content unavailable';
        }
        
        // Convert content to string if needed
        content = String(content);
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender === 'You' ? 'user-message' : 'bot-message'}`;
        
        const timestamp = new Date().toLocaleTimeString();
        
        messageDiv.innerHTML = `
            <div class="message-header">
                <strong>${sender}:</strong>
                <span class="timestamp">${timestamp}</span>
            </div>
            <div class="message-content">${content}</div>
        `;
        
        chatMessagesContainer.appendChild(messageDiv);
        chatMessagesContainer.scrollTop = chatMessagesContainer.scrollHeight;
        
        // Add animation
        messageDiv.style.opacity = '0';
        messageDiv.style.transform = 'translateY(20px)';
        setTimeout(() => {
            messageDiv.style.transition = 'all 0.3s ease';
            messageDiv.style.opacity = '1';
            messageDiv.style.transform = 'translateY(0)';
        }, 10);
        
        console.log('✅ Message added successfully');
        
    } catch (error) {
        console.error('❌ Error adding message:', error);
        
        // Fallback simple message
        const simpleDiv = document.createElement('div');
        simpleDiv.className = 'message bot-message';
        simpleDiv.innerHTML = `<strong>${sender}:</strong> ${content}`;
        if (chatMessagesContainer) {
            chatMessagesContainer.appendChild(simpleDiv);
        }
    }
}

// Input handling
function handleEnter(event) {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        sendMessage();
    }
}

// Utility functions
function getSessionId() {
    let sessionId = localStorage.getItem('chat_session_id');
    if (!sessionId) {
        sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        localStorage.setItem('chat_session_id', sessionId);
    }
    return sessionId;
}

// Manual test functions for debugging
window.testChatAPI = async function() {
    console.log('🧪 Testing Chat API manually');
    try {
        const response = await fetch('/api/chat', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ message: 'test' })
        });
        const data = await response.json();
        console.log('🧪 Manual API test result:', data);
        handleChatResponse(data);
    } catch (error) {
        console.error('🧪 Manual API test failed:', error);
    }
};

window.testWebSocket = function() {
    console.log('🧪 Testing WebSocket manually');
    if (ws && ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({
            type: 'chat',
            message: 'test websocket'
        }));
        console.log('🧪 Manual WebSocket test sent');
    } else {
        console.error('🧪 WebSocket not available');
    }
};

// Event listeners
document.addEventListener('DOMContentLoaded', () => {
    console.log('🚀 Chat interface initializing...');
    
    connectWebSocket();
    
    if (chatInput) {
        chatInput.addEventListener('keydown', handleEnter);
        console.log('✅ Chat input listeners added');
    } else {
        console.error('❌ Chat input element not found');
    }
    
    console.log('✅ Enhanced Trading Bot Chat Interface Loaded (Debug Version)');
    console.log('🧪 Use testChatAPI() or testWebSocket() in console for manual testing');
});

// Global error handler
window.addEventListener('error', (event) => {
    console.error('🚨 Global JavaScript error:', event.error);
});

// Export for debugging
window.debugChat = {
    sendMessage,
    addMessage,
    connectWebSocket,
    handleChatResponse,
    testChatAPI: window.testChatAPI,
    testWebSocket: window.testWebSocket
};
