// File: E:\Trade Chat Bot\G Trading Bot\static\js\dashboard.js
// Location: E:\Trade Chat Bot\G Trading Bot\static\js\dashboard.js

// 🚀 Elite Trading Bot V3.0 - Industrial Dashboard JavaScript (FIXED)

class IndustrialTradingDashboard {
    constructor() {
        this.currentSection = 'trading';
        this.websocket = null;
        this.updateIntervals = {};
        this.isConnected = false;
        this.chatMessages = [];
        this.tradingStrategies = [];
        this.marketData = {};
        this.portfolioData = {};
        this.trainingStatus = 'idle';
        
        console.log('🚀 Elite Trading Dashboard initializing...');
        this.init();
    }

    async init() {
        try {
            console.log('✅ Starting dashboard initialization...');
            
            // Initialize all components
            this.initializeNavigation();
            this.initializeWebSocket();
            this.initializeTradingControls();
            this.initializeMLTraining();
            this.initializeChat();
            this.initializeMarketData();
            this.initializeSettings();
            
            // Start data updates
            this.startDataUpdates();
            
            console.log('✅ Dashboard initialization completed');
        } catch (error) {
            console.error('❌ Dashboard initialization failed:', error);
            this.handleError('Failed to initialize dashboard', error);
        }
    }

    // 🧭 Navigation System
    initializeNavigation() {
        console.log('🧭 Initializing navigation...');
        
        const navButtons = document.querySelectorAll('.nav-btn');
        const sections = document.querySelectorAll('.dashboard-section');
        
        navButtons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                const targetSection = e.target.dataset.section;
                this.switchSection(targetSection);
            });
        });
        
        // Set initial active section
        this.switchSection(this.currentSection);
    }

    switchSection(sectionName) {
        console.log(`🔄 Switching to section: ${sectionName}`);
        
        // Update navigation
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-section="${sectionName}"]`)?.classList.add('active');
        
        // Update sections
        document.querySelectorAll('.dashboard-section').forEach(section => {
            section.classList.remove('active');
        });
        document.getElementById(`${sectionName}-section`)?.classList.add('active');
        
        this.currentSection = sectionName;
        
        // Load section-specific data
        this.loadSectionData(sectionName);
    }

    async loadSectionData(sectionName) {
        switch(sectionName) {
            case 'trading':
                await this.loadTradingData();
                break;
            case 'training':
                await this.loadTrainingData();
                break;
            case 'market':
                await this.loadMarketData();
                break;
            case 'chat':
                this.focusChatInput();
                break;
            case 'settings':
                await this.loadSettings();
                break;
        }
    }

    // 🌐 WebSocket Connection
    initializeWebSocket() {
        console.log('🌐 Initializing WebSocket connection...');
        
        const wsUrl = `ws://${window.location.host}/ws`;
        this.websocket = new WebSocket(wsUrl);
        
        this.websocket.onopen = () => {
            console.log('✅ WebSocket connected');
            this.isConnected = true;
            this.updateConnectionStatus(true);
        };
        
        this.websocket.onmessage = (event) => {
            try {
                const data = JSON.parse(event.data);
                this.handleWebSocketMessage(data);
            } catch (error) {
                console.error('❌ WebSocket message error:', error);
            }
        };
        
        this.websocket.onclose = () => {
            console.log('🔌 WebSocket disconnected');
            this.isConnected = false;
            this.updateConnectionStatus(false);
            
            // Attempt to reconnect after 5 seconds
            setTimeout(() => this.initializeWebSocket(), 5000);
        };
        
        this.websocket.onerror = (error) => {
            console.error('❌ WebSocket error:', error);
            this.updateConnectionStatus(false);
        };
    }

    handleWebSocketMessage(data) {
        switch(data.type) {
            case 'market_update':
                this.updateMarketDisplay(data.data);
                break;
            case 'portfolio_update':
                this.updatePortfolioDisplay(data.data);
                break;
            case 'training_progress':
                this.updateTrainingProgress(data.data);
                break;
            case 'chat_response':
                this.addChatMessage(data.data, 'ai');
                break;
            default:
                console.log('📨 Unknown WebSocket message type:', data.type);
        }
    }

    // 📊 Trading Controls
    initializeTradingControls() {
        console.log('📊 Initializing trading controls...');
        
        // Start/Stop Trading Buttons
        document.getElementById('start-trading')?.addEventListener('click', () => {
            this.startTrading();
        });
        
        document.getElementById('stop-trading')?.addEventListener('click', () => {
            this.stopTrading();
        });
        
        document.getElementById('pause-trading')?.addEventListener('click', () => {
            this.pauseTrading();
        });
        
        // Strategy Selection
        document.getElementById('strategy-select')?.addEventListener('change', (e) => {
            this.selectStrategy(e.target.value);
        });
        
        // Load available strategies
        this.loadStrategies();
    }

    async startTrading() {
        try {
            console.log('🚀 Starting trading...');
            const response = await fetch('/api/trading/start', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            
            if (response.ok) {
                const result = await response.json();
                this.updateTradingStatus('active');
                this.showNotification('Trading started successfully', 'success');
            } else {
                throw new Error('Failed to start trading');
            }
        } catch (error) {
            console.error('❌ Failed to start trading:', error);
            this.showNotification('Failed to start trading', 'error');
        }
    }

    async stopTrading() {
        try {
            console.log('🛑 Stopping trading...');
            const response = await fetch('/api/trading/stop', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            
            if (response.ok) {
                this.updateTradingStatus('stopped');
                this.showNotification('Trading stopped', 'info');
            } else {
                throw new Error('Failed to stop trading');
            }
        } catch (error) {
            console.error('❌ Failed to stop trading:', error);
            this.showNotification('Failed to stop trading', 'error');
        }
    }

    async pauseTrading() {
        try {
            console.log('⏸️ Pausing trading...');
            const response = await fetch('/api/trading/pause', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            
            if (response.ok) {
                this.updateTradingStatus('paused');
                this.showNotification('Trading paused', 'warning');
            } else {
                throw new Error('Failed to pause trading');
            }
        } catch (error) {
            console.error('❌ Failed to pause trading:', error);
            this.showNotification('Failed to pause trading', 'error');
        }
    }

    updateTradingStatus(status) {
        const statusElement = document.getElementById('trading-status');
        const statusBadge = document.getElementById('status-badge');
        
        if (statusElement) {
            statusElement.textContent = status.toUpperCase();
            statusElement.className = `status-badge status-${status}`;
        }
        
        if (statusBadge) {
            statusBadge.textContent = status;
            statusBadge.className = `badge badge-${status}`;
        }
        
        // Update button states
        this.updateTradingButtons(status);
    }

    updateTradingButtons(status) {
        const startBtn = document.getElementById('start-trading');
        const stopBtn = document.getElementById('stop-trading');
        const pauseBtn = document.getElementById('pause-trading');
        
        // Reset all buttons
        [startBtn, stopBtn, pauseBtn].forEach(btn => {
            if (btn) {
                btn.disabled = false;
                btn.classList.remove('btn-disabled');
            }
        });
        
        // Set button states based on status
        switch(status) {
            case 'active':
                if (startBtn) {
                    startBtn.disabled = true;
                    startBtn.classList.add('btn-disabled');
                }
                break;
            case 'stopped':
                if (stopBtn) {
                    stopBtn.disabled = true;
                    stopBtn.classList.add('btn-disabled');
                }
                if (pauseBtn) {
                    pauseBtn.disabled = true;
                    pauseBtn.classList.add('btn-disabled');
                }
                break;
            case 'paused':
                if (pauseBtn) {
                    pauseBtn.disabled = true;
                    pauseBtn.classList.add('btn-disabled');
                }
                break;
        }
    }

    // 🧠 ML Training
    initializeMLTraining() {
        console.log('🧠 Initializing ML training controls...');
        
        document.getElementById('start-training')?.addEventListener('click', () => {
            this.startTraining();
        });
        
        document.getElementById('stop-training')?.addEventListener('click', () => {
            this.stopTraining();
        });
        
        document.getElementById('model-select')?.addEventListener('change', (e) => {
            this.selectModel(e.target.value);
        });
        
        // Load available models
        this.loadModels();
    }

    async startTraining() {
        try {
            console.log('🚀 Starting ML training...');
            
            const modelType = document.getElementById('model-select')?.value || 'lstm';
            const epochs = document.getElementById('epochs')?.value || 100;
            
            const response = await fetch('/api/training/start', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    model_type: modelType,
                    epochs: parseInt(epochs),
                    dataset: 'market_data'
                })
            });
            
            if (response.ok) {
                this.trainingStatus = 'training';
                this.updateTrainingUI('training');
                this.showNotification('Training started', 'success');
            } else {
                throw new Error('Failed to start training');
            }
        } catch (error) {
            console.error('❌ Training start failed:', error);
            this.showNotification('Failed to start training', 'error');
        }
    }

    async stopTraining() {
        try {
            console.log('🛑 Stopping ML training...');
            
            const response = await fetch('/api/training/stop', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });
            
            if (response.ok) {
                this.trainingStatus = 'stopped';
                this.updateTrainingUI('stopped');
                this.showNotification('Training stopped', 'info');
            } else {
                throw new Error('Failed to stop training');
            }
        } catch (error) {
            console.error('❌ Training stop failed:', error);
            this.showNotification('Failed to stop training', 'error');
        }
    }

    updateTrainingProgress(data) {
        const progressBar = document.getElementById('training-progress');
        const progressText = document.getElementById('progress-text');
        const epochCounter = document.getElementById('epoch-counter');
        const lossDisplay = document.getElementById('loss-display');
        
        if (progressBar && data.progress !== undefined) {
            progressBar.style.width = `${data.progress}%`;
        }
        
        if (progressText && data.progress !== undefined) {
            progressText.textContent = `${data.progress.toFixed(1)}%`;
        }
        
        if (epochCounter && data.epoch !== undefined) {
            epochCounter.textContent = `Epoch: ${data.epoch}/${data.total_epochs || 'N/A'}`;
        }
        
        if (lossDisplay && data.loss !== undefined) {
            lossDisplay.textContent = `Loss: ${data.loss.toFixed(6)}`;
        }
    }

    updateTrainingUI(status) {
        const statusElement = document.getElementById('training-status');
        const startBtn = document.getElementById('start-training');
        const stopBtn = document.getElementById('stop-training');
        
        if (statusElement) {
            statusElement.textContent = status.toUpperCase();
            statusElement.className = `status-badge status-${status}`;
        }
        
        if (startBtn && stopBtn) {
            if (status === 'training') {
                startBtn.disabled = true;
                stopBtn.disabled = false;
            } else {
                startBtn.disabled = false;
                stopBtn.disabled = true;
            }
        }
    }

    // 💬 Chat System
    initializeChat() {
        console.log('💬 Initializing chat system...');
        
        const chatInput = document.getElementById('chat-input');
        const sendButton = document.getElementById('send-message');
        
        sendButton?.addEventListener('click', () => {
            this.sendChatMessage();
        });
        
        chatInput?.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendChatMessage();
            }
        });
        
        // Add welcome message
        this.addChatMessage('Welcome to Elite Trading Bot! How can I help you today?', 'ai');
    }

    async sendChatMessage() {
        const chatInput = document.getElementById('chat-input');
        const message = chatInput?.value.trim();
        
        if (!message) return;
        
        // Add user message to chat
        this.addChatMessage(message, 'user');
        chatInput.value = '';
        
        try {
            // Send to Gemini AI
            const response = await fetch('/api/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    message: message,
                    context: {
                        portfolio: this.portfolioData,
                        market: this.marketData,
                        trading_status: this.currentSection
                    }
                })
            });
            
            if (response.ok) {
                const result = await response.json();
                this.addChatMessage(result.response, 'ai');
            } else {
                throw new Error('Failed to get AI response');
            }
        } catch (error) {
            console.error('❌ Chat error:', error);
            this.addChatMessage('Sorry, I encountered an error. Please try again.', 'ai', true);
        }
    }

    addChatMessage(message, sender, isError = false) {
        const chatMessages = document.getElementById('chat-messages');
        if (!chatMessages) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `chat-message ${sender}-message ${isError ? 'error-message' : ''}`;
        
        const timestamp = new Date().toLocaleTimeString();
        messageDiv.innerHTML = `
            <div class="message-content">${message}</div>
            <div class="message-time">${timestamp}</div>
        `;
        
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        // Store message
        this.chatMessages.push({
            message,
            sender,
            timestamp: Date.now(),
            isError
        });
    }

    focusChatInput() {
        const chatInput = document.getElementById('chat-input');
        if (chatInput) {
            chatInput.focus();
        }
    }

    // 📈 Market Data
    initializeMarketData() {
        console.log('📈 Initializing market data...');
        this.loadMarketData();
    }

    async loadMarketData() {
        try {
            const response = await fetch('/api/market-data');
            if (response.ok) {
                const data = await response.json();
                this.marketData = data;
                this.updateMarketDisplay(data);
            } else {
                throw new Error('Failed to load market data');
            }
        } catch (error) {
            console.error('❌ Market data error:', error);
            this.showFallbackMarketData();
        }
    }

    updateMarketDisplay(data) {
        const marketList = document.getElementById('market-list');
        if (!marketList || !data) return;
        
        // Clear existing data
        marketList.innerHTML = '';
        
        // Display top 10 cryptocurrencies
        const topCryptos = Object.entries(data).slice(0, 10);
        
        topCryptos.forEach(([symbol, info], index) => {
            const row = document.createElement('div');
            row.className = 'market-row';
            
            const priceChange = info.price_change_24h || 0;
            const changeClass = priceChange >= 0 ? 'positive' : 'negative';
            const changeSymbol = priceChange >= 0 ? '+' : '';
            
            row.innerHTML = `
                <div class="rank">#${index + 1}</div>
                <div class="crypto-info">
                    <div class="crypto-symbol">${symbol}</div>
                    <div class="crypto-name">${info.name || symbol}</div>
                </div>
                <div class="price">$${(info.price || 0).toFixed(2)}</div>
                <div class="change ${changeClass}">
                    ${changeSymbol}${priceChange.toFixed(2)}%
                </div>
                <div class="volume">$${this.formatVolume(info.volume_24h || 0)}</div>
            `;
            
            marketList.appendChild(row);
        });
    }

    showFallbackMarketData() {
        const fallbackData = {
            'BTC': { name: 'Bitcoin', price: 45000, price_change_24h: 2.5, volume_24h: 28000000000 },
            'ETH': { name: 'Ethereum', price: 3200, price_change_24h: -1.2, volume_24h: 15000000000 },
            'SOL': { name: 'Solana', price: 95, price_change_24h: 5.8, volume_24h: 2500000000 },
            'ADA': { name: 'Cardano', price: 0.55, price_change_24h: -0.8, volume_24h: 1200000000 },
            'DOT': { name: 'Polkadot', price: 8.2, price_change_24h: 3.2, volume_24h: 800000000 }
        };
        
        this.updateMarketDisplay(fallbackData);
    }

    formatVolume(volume) {
        if (volume >= 1e9) {
            return (volume / 1e9).toFixed(1) + 'B';
        } else if (volume >= 1e6) {
            return (volume / 1e6).toFixed(1) + 'M';
        } else if (volume >= 1e3) {
            return (volume / 1e3).toFixed(1) + 'K';
        }
        return volume.toFixed(0);
    }

    // ⚙️ Settings
    initializeSettings() {
        console.log('⚙️ Initializing settings...');
        
        const settingsForm = document.getElementById('settings-form');
        settingsForm?.addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveSettings();
        });
        
        this.loadSettings();
    }

    async loadSettings() {
        try {
            const response = await fetch('/api/settings');
            if (response.ok) {
                const settings = await response.json();
                this.populateSettingsForm(settings);
            }
        } catch (error) {
            console.error('❌ Failed to load settings:', error);
        }
    }

    async saveSettings() {
        try {
            const formData = new FormData(document.getElementById('settings-form'));
            const settings = Object.fromEntries(formData);
            
            const response = await fetch('/api/settings', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(settings)
            });
            
            if (response.ok) {
                this.showNotification('Settings saved successfully', 'success');
            } else {
                throw new Error('Failed to save settings');
            }
        } catch (error) {
            console.error('❌ Failed to save settings:', error);
            this.showNotification('Failed to save settings', 'error');
        }
    }

    populateSettingsForm(settings) {
        Object.keys(settings).forEach(key => {
            const element = document.getElementById(key);
            if (element) {
                if (element.type === 'checkbox') {
                    element.checked = settings[key];
                } else {
                    element.value = settings[key];
                }
            }
        });
    }

    // 🔄 Data Updates
    startDataUpdates() {
        console.log('🔄 Starting periodic data updates...');
        
        // Market data every 10 seconds
        this.updateIntervals.market = setInterval(() => {
            if (this.currentSection === 'market') {
                this.loadMarketData();
            }
        }, 10000);
        
        // Portfolio data every 30 seconds
        this.updateIntervals.portfolio = setInterval(() => {
            this.loadPortfolioData();
        }, 30000);
        
        // System status every 60 seconds
        this.updateIntervals.status = setInterval(() => {
            this.checkSystemStatus();
        }, 60000);
    }

    async loadPortfolioData() {
        try {
            const response = await fetch('/api/portfolio');
            if (response.ok) {
                const data = await response.json();
                this.portfolioData = data;
                this.updatePortfolioDisplay(data);
            }
        } catch (error) {
            console.error('❌ Portfolio data error:', error);
        }
    }

    updatePortfolioDisplay(data) {
        const elements = {
            totalValue: document.getElementById('portfolio-value'),
            dailyPnL: document.getElementById('daily-pnl'),
            totalPnL: document.getElementById('total-pnl'),
            winRate: document.getElementById('win-rate')
        };
        
        if (data && elements.totalValue) {
            elements.totalValue.textContent = `$${(data.total_value || 0).toFixed(2)}`;
        }
        
        if (data && elements.dailyPnL) {
            const dailyPnL = data.daily_pnl || 0;
            elements.dailyPnL.textContent = `${dailyPnL >= 0 ? '+' : ''}$${dailyPnL.toFixed(2)}`;
            elements.dailyPnL.className = dailyPnL >= 0 ? 'positive' : 'negative';
        }
        
        if (data && elements.totalPnL) {
            const totalPnL = data.total_pnl || 0;
            elements.totalPnL.textContent = `${totalPnL >= 0 ? '+' : ''}$${totalPnL.toFixed(2)}`;
            elements.totalPnL.className = totalPnL >= 0 ? 'positive' : 'negative';
        }
        
        if (data && elements.winRate) {
            elements.winRate.textContent = `${(data.win_rate || 0).toFixed(1)}%`;
        }
    }

    async checkSystemStatus() {
        try {
            const response = await fetch('/health');
            if (response.ok) {
                const status = await response.json();
                this.updateSystemStatus(status);
            }
        } catch (error) {
            console.error('❌ System status check failed:', error);
            this.updateConnectionStatus(false);
        }
    }

    updateSystemStatus(status) {
        const statusElement = document.getElementById('system-status');
        if (statusElement && status) {
            const isHealthy = status.status === 'healthy';
            statusElement.textContent = isHealthy ? 'Online' : 'Issues';
            statusElement.className = `status-indicator ${isHealthy ? 'online' : 'offline'}`;
        }
    }

    updateConnectionStatus(isConnected) {
        const statusElement = document.getElementById('connection-status');
        if (statusElement) {
            statusElement.textContent = isConnected ? 'Connected' : 'Disconnected';
            statusElement.className = `status-indicator ${isConnected ? 'online' : 'offline'}`;
        }
    }

    // 🔧 Utility Functions
    async loadStrategies() {
        try {
            const response = await fetch('/api/strategies/available');
            if (response.ok) {
                const strategies = await response.json();
                this.populateStrategySelect(strategies);
            }
        } catch (error) {
            console.error('❌ Failed to load strategies:', error);
        }
    }

    populateStrategySelect(strategies) {
        const select = document.getElementById('strategy-select');
        if (!select || !strategies) return;
        
        select.innerHTML = '<option value="">Select Strategy</option>';
        
        if (strategies.strategies) {
            strategies.strategies.forEach(strategy => {
                const option = document.createElement('option');
                option.value = strategy.id || strategy.name;
                option.textContent = strategy.name || strategy.id;
                select.appendChild(option);
            });
        }
    }

    async loadModels() {
        try {
            const response = await fetch('/api/models/available');
            if (response.ok) {
                const models = await response.json();
                this.populateModelSelect(models);
            }
        } catch (error) {
            console.error('❌ Failed to load models:', error);
            this.showFallbackModels();
        }
    }

    populateModelSelect(models) {
        const select = document.getElementById('model-select');
        if (!select) return;
        
        select.innerHTML = '';
        
        const defaultModels = models.models || [
            { id: 'lstm', name: 'LSTM Neural Network' },
            { id: 'transformer', name: 'Transformer Model' },
            { id: 'cnn', name: 'Convolutional Neural Network' },
            { id: 'ensemble', name: 'Ensemble Model' }
        ];
        
        defaultModels.forEach(model => {
            const option = document.createElement('option');
            option.value = model.id;
            option.textContent = model.name;
            select.appendChild(option);
        });
    }

    showFallbackModels() {
        const select = document.getElementById('model-select');
        if (!select) return;
        
        select.innerHTML = `
            <option value="lstm">LSTM Neural Network</option>
            <option value="transformer">Transformer Model</option>
            <option value="cnn">Convolutional Neural Network</option>
            <option value="ensemble">Ensemble Model</option>
        `;
    }

    selectStrategy(strategyId) {
        console.log(`📊 Selected strategy: ${strategyId}`);
        // Additional strategy selection logic can be added here
    }

    selectModel(modelId) {
        console.log(`🧠 Selected model: ${modelId}`);
        // Additional model selection logic can be added here
    }

    showNotification(message, type = 'info') {
        console.log(`🔔 Notification (${type}): ${message}`);
        
        // Create notification element
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-icon">${this.getNotificationIcon(type)}</span>
                <span class="notification-message">${message}</span>
                <button class="notification-close">&times;</button>
            </div>
        `;
        
        // Add to page
        const container = document.getElementById('notifications') || document.body;
        container.appendChild(notification);
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
            notification.remove();
        }, 5000);
        
        // Manual close
        notification.querySelector('.notification-close')?.addEventListener('click', () => {
            notification.remove();
        });
    }

    getNotificationIcon(type) {
        const icons = {
            success: '✅',
            error: '❌',
            warning: '⚠️',
            info: 'ℹ️'
        };
        return icons[type] || icons.info;
    }

    handleError(message, error) {
        console.error(`❌ ${message}:`, error);
        this.showNotification(message, 'error');
    }

    // 🧹 Cleanup
    destroy() {
        console.log('🧹 Cleaning up dashboard...');
        
        // Clear intervals
        Object.values(this.updateIntervals).forEach(interval => {
            clearInterval(interval);
        });
        
        // Close WebSocket
        if (this.websocket) {
            this.websocket.close();
        }
        
        console.log('✅ Dashboard cleanup completed');
    }

    // 📱 Responsive Helper
    handleResize() {
        // Add responsive behavior if needed
        const width = window.innerWidth;
        
        if (width < 768) {
            document.body.classList.add('mobile-view');
        } else {
            document.body.classList.remove('mobile-view');
        }
    }

    // 🔄 Refresh Data
    async refreshAllData() {
        console.log('🔄 Refreshing all data...');
        
        try {
            await Promise.all([
                this.loadMarketData(),
                this.loadPortfolioData(),
                this.loadTradingData(),
                this.checkSystemStatus()
            ]);
            
            this.showNotification('Data refreshed successfully', 'success');
        } catch (error) {
            console.error('❌ Failed to refresh data:', error);
            this.showNotification('Failed to refresh some data', 'warning');
        }
    }

    async loadTradingData() {
        try {
            const response = await fetch('/api/trading/status');
            if (response.ok) {
                const data = await response.json();
                this.updateTradingStatus(data.status || 'stopped');
            }
        } catch (error) {
            console.error('❌ Failed to load trading data:', error);
        }
    }

    async loadTrainingData() {
        try {
            const response = await fetch('/api/training/status');
            if (response.ok) {
                const data = await response.json();
                this.updateTrainingUI(data.status || 'idle');
                
                if (data.progress) {
                    this.updateTrainingProgress(data.progress);
                }
            }
        } catch (error) {
            console.error('❌ Failed to load training data:', error);
        }
    }
}

// 🚀 Initialize Dashboard
document.addEventListener('DOMContentLoaded', () => {
    console.log('📄 DOM loaded, initializing dashboard...');
    
    // Create global dashboard instance
    window.dashboard = new IndustrialTradingDashboard();
    
    // Handle window events
    window.addEventListener('resize', () => {
        window.dashboard.handleResize();
    });
    
    // Handle page visibility changes
    document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'visible') {
            window.dashboard.refreshAllData();
        }
    });
    
    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
        if (window.dashboard) {
            window.dashboard.destroy();
        }
    });
});

// 🌐 Global Functions for Console Testing
window.startTrading = () => window.dashboard?.startTrading();
window.stopTrading = () => window.dashboard?.stopTrading();
window.refreshData = () => window.dashboard?.refreshAllData();
window.switchSection = (section) => window.dashboard?.switchSection(section);

console.log('🚀 Elite Trading Dashboard script loaded successfully!');