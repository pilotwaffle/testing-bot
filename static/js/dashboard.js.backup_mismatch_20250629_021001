// Enhanced Dashboard JavaScript - FIXED VERSION
// Compatible with dashboard.html elements, no more null reference errors

class TradingDashboard {
    constructor() {
        this.ws = null;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        this.reconnectInterval = 3000;
        this.init();
    }

    init() {
        console.log('🚀 Trading Dashboard initializing...');
        this.setupEventListeners();
        this.connectWebSocket();
        this.loadInitialData();
    }

    // FIXED: Safe element updates with null checks
    safeUpdateElement(elementId, content, property = 'textContent') {
        const element = document.getElementById(elementId);
        if (element) {
            if (property === 'textContent') {
                element.textContent = content;
            } else if (property === 'innerHTML') {
                element.innerHTML = content;
            } else if (property === 'className') {
                element.className = content;
            }
            return true;
        } else {
            console.warn(`⚠️ Element not found: ${elementId}`);
            return false;
        }
    }

    connectWebSocket() {
        try {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${window.location.host}/ws`;
            
            console.log(`Connecting to WebSocket: ${wsUrl}`);
            this.ws = new WebSocket(wsUrl);
            
            this.ws.onopen = (event) => {
                console.log('✅ WebSocket connected');
                this.reconnectAttempts = 0;
                this.updateConnectionStatus('Connected', 'success');
            };
            
            this.ws.onmessage = (event) => {
                try {
                    const data = JSON.parse(event.data);
                    this.handleWebSocketMessage(data);
                } catch (error) {
                    console.error('Error parsing WebSocket message:', error);
                }
            };
            
            this.ws.onclose = (event) => {
                console.log('🔴 WebSocket disconnected');
                this.updateConnectionStatus('Disconnected', 'error');
                this.scheduleReconnect();
            };
            
            this.ws.onerror = (event) => {
                console.error('WebSocket error:', event);
                this.updateConnectionStatus('Error', 'error');
            };
            
        } catch (error) {
            console.error('Failed to create WebSocket connection:', error);
            this.updateConnectionStatus('Failed', 'error');
            this.scheduleReconnect();
        }
    }

    scheduleReconnect() {
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++;
            console.log(`Attempting to reconnect in ${this.reconnectInterval/1000}s... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);
            
            setTimeout(() => {
                this.connectWebSocket();
            }, this.reconnectInterval);
        } else {
            console.log('Max reconnection attempts reached. Switching to polling mode.');
            this.startPollingMode();
        }
    }

    startPollingMode() {
        console.log('🔄 Starting polling mode for updates');
        this.updateConnectionStatus('Polling Mode', 'warning');
        
        setInterval(() => {
            this.loadInitialData();
        }, 10000);
    }

    handleWebSocketMessage(data) {
        console.log('📨 WebSocket message received:', data.type);
        
        switch (data.type) {
            case 'real_time_update':
            case 'initial_data':
                this.updateMarketData(data.market_data);
                this.updatePortfolio(data.portfolio);
                this.updateTradingStatus(data.trading_status);
                break;
            
            case 'trading_status_update':
                this.showAlert(data.message, data.status === 'started' ? 'success' : 'info');
                break;
            
            case 'ml_training_update':
                this.showAlert(`ML Training: ${data.model_type} for ${data.symbol} completed`, 'success');
                break;
            
            case 'pong':
                console.log('🏓 WebSocket ping/pong successful');
                break;
            
            default:
                console.log('Unknown message type:', data.type);
        }
    }

    updateMarketData(marketData) {
        if (!marketData) return;
        
        this.safeUpdateElement('marketData', 
            Object.entries(marketData).map(([symbol, data]) => `
                <div class="price-card">
                    <div class="symbol">${symbol}</div>
                    <div class="price">$${data.price.toFixed(2)}</div>
                    <div class="change ${data.change_24h >= 0 ? 'positive' : 'negative'}">
                        ${data.change_24h >= 0 ? '+' : ''}${data.change_24h.toFixed(2)}%
                    </div>
                </div>
            `).join(''), 'innerHTML');
    }

    updatePortfolio(portfolio) {
        if (!portfolio) return;
        
        this.safeUpdateElement('totalValue', `$${portfolio.total_value.toFixed(2)}`);
        this.safeUpdateElement('unrealizedPnl', `$${portfolio.pnl_24h.toFixed(2)}`);
        
        // Update PnL color
        const pnlElement = document.getElementById('unrealizedPnl');
        if (pnlElement) {
            pnlElement.className = portfolio.pnl_24h >= 0 ? 'positive' : 'negative';
        }
    }

    updateTradingStatus(status) {
        if (!status) return;
        
        const statusText = status.is_running ? 'Running' : 'Stopped';
        const statusClass = status.is_running ? 'running' : 'stopped';
        
        // Update multiple possible status elements
        this.safeUpdateElement('botStatus', statusText);
        this.safeUpdateElement('tradingStatus', statusText);
        
        const statusElement = document.querySelector('[data-status="bot"]');
        if (statusElement) {
            statusElement.className = statusClass;
        }
    }

    updateConnectionStatus(status, type) {
        this.safeUpdateElement('connectionStatus', status);
        
        const statusElement = document.getElementById('connectionStatus');
        if (statusElement) {
            statusElement.className = `status-value text-${type}`;
        }
    }

    setupEventListeners() {
        // Trading control buttons - with null checks
        const startBtn = document.getElementById('startBot');
        const stopBtn = document.getElementById('stopBot');
        const refreshBtn = document.getElementById('refreshData');
        const sendChatBtn = document.getElementById('sendChat');
        const chatInput = document.getElementById('chat-input');
        
        if (startBtn) startBtn.addEventListener('click', () => this.startBot());
        if (stopBtn) stopBtn.addEventListener('click', () => this.stopBot());
        if (refreshBtn) refreshBtn.addEventListener('click', () => this.refreshData());
        if (sendChatBtn) sendChatBtn.addEventListener('click', () => this.sendChatMessage());
        if (chatInput) {
            chatInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') this.sendChatMessage();
            });
        }
    }

    async loadInitialData() {
        try {
            await this.updateStatus();
            await this.updateMarketDataFromAPI();
        } catch (error) {
            console.error('Error loading initial data:', error);
        }
    }

    async updateStatus() {
        try {
            const response = await fetch('/health');
            const data = await response.json();
            
            this.safeUpdateElement('lastUpdate', new Date().toLocaleTimeString());
            
            // Update component counts
            if (data.components) {
                const mlCount = Object.values(data.components).filter(Boolean).length;
                this.safeUpdateElement('mlModelsCount', mlCount);
            }
            
        } catch (error) {
            console.error('Error updating status:', error);
        }
    }

    async updateMarketDataFromAPI() {
        try {
            const response = await fetch('/api/market-data');
            const data = await response.json();
            
            if (data.status === 'success' && data.data) {
                this.updateMarketData(data.data);
            }
        } catch (error) {
            console.error('Error updating market data:', error);
        }
    }

    // Trading Controls
    async startBot() {
        this.showAlert('Starting trading bot...', 'info');
        try {
            const response = await fetch('/api/trading/start', { method: 'POST' });
            const data = await response.json();
            this.showAlert(data.message, data.status === 'success' ? 'success' : 'error');
            this.safeUpdateElement('trading-response', data.message);
        } catch (error) {
            this.showAlert('Failed to start trading bot: ' + error.message, 'error');
        }
    }

    async stopBot() {
        this.showAlert('Stopping trading bot...', 'info');
        try {
            const response = await fetch('/api/trading/stop', { method: 'POST' });
            const data = await response.json();
            this.showAlert(data.message, data.status === 'success' ? 'success' : 'error');
            this.safeUpdateElement('trading-response', data.message);
        } catch (error) {
            this.showAlert('Failed to stop trading bot: ' + error.message, 'error');
        }
    }

    async refreshData() {
        this.showAlert('Refreshing data...', 'info');
        await this.loadInitialData();
        this.showAlert('Data refreshed successfully!', 'success');
    }

    // Chat functionality
    async sendChatMessage() {
        const input = document.getElementById('chat-input');
        const messages = document.getElementById('chat-messages');
        
        if (!input || !messages || !input.value.trim()) return;

        const message = input.value.trim();
        input.value = '';

        this.addChatMessage('You', message);

        try {
            const response = await fetch('/api/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message })
            });

            const data = await response.json();

            if (data.status === 'success') {
                this.addChatMessage('Bot', data.response);
            } else {
                this.addChatMessage('Bot', 'Error: ' + data.message);
            }
        } catch (error) {
            this.addChatMessage('Bot', 'Error: ' + error.message);
        }
    }

    addChatMessage(sender, message) {
        const messages = document.getElementById('chat-messages');
        if (!messages) return;

        const messageDiv = document.createElement('div');
        messageDiv.style.marginBottom = '10px';
        messageDiv.style.padding = '8px 12px';
        messageDiv.style.borderRadius = '8px';
        
        if (sender === 'You') {
            messageDiv.style.background = 'rgba(0, 212, 255, 0.2)';
            messageDiv.style.border = '1px solid rgba(0, 212, 255, 0.3)';
        } else {
            messageDiv.style.background = 'rgba(76, 175, 80, 0.2)';
            messageDiv.style.border = '1px solid rgba(76, 175, 80, 0.3)';
        }

        messageDiv.innerHTML = `
            <strong>${sender}:</strong> ${message}
            <div style="font-size: 0.8em; opacity: 0.7; margin-top: 5px;">
                ${new Date().toLocaleTimeString()}
            </div>
        `;

        messages.appendChild(messageDiv);
        messages.scrollTop = messages.scrollHeight;
    }

    showAlert(message, type = 'info') {
        // Remove existing alerts
        document.querySelectorAll('.alert').forEach(alert => alert.remove());

        const alert = document.createElement('div');
        alert.className = `alert alert-${type}`;
        alert.textContent = message;
        alert.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            max-width: 400px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        `;

        const colors = {
            success: '#4CAF50',
            error: '#f44336',
            warning: '#ff9800',
            info: '#2196F3'
        };
        alert.style.backgroundColor = colors[type] || colors.info;

        document.body.appendChild(alert);
        setTimeout(() => alert.remove(), 5000);
    }

    startHeartbeat() {
        setInterval(() => {
            if (this.ws && this.ws.readyState === WebSocket.OPEN) {
                this.ws.send(JSON.stringify({ type: 'ping' }));
            }
        }, 30000);
    }
}

// Global functions for backward compatibility
window.startTrading = async function() {
    if (window.dashboard) await window.dashboard.startBot();
};

window.stopTrading = async function() {
    if (window.dashboard) await window.dashboard.stopBot();
};

window.getStatus = async function() {
    if (window.dashboard) await window.dashboard.updateStatus();
};

window.getPositions = async function() {
    if (window.dashboard) await window.dashboard.refreshData();
};

window.getMarketData = async function() {
    if (window.dashboard) await window.dashboard.updateMarketDataFromAPI();
};

window.testMLSystem = async function() {
    try {
        const response = await fetch('/api/ml/test', { method: 'POST' });
        const data = await response.json();
        const responseElement = document.getElementById('ml-test-response');
        if (responseElement) {
            responseElement.textContent = data.message || data.status;
        }
    } catch (error) {
        const responseElement = document.getElementById('ml-test-response');
        if (responseElement) {
            responseElement.textContent = '❌ Error: ' + error.message;
        }
    }
};

window.trainModel = async function(modelType, symbolSelectId, responseId) {
    if (window.dashboard) {
        const symbolSelect = document.getElementById(symbolSelectId);
        const symbol = symbolSelect ? symbolSelect.value : 'BTC/USDT';
        
        const responseElement = document.getElementById(responseId);
        if (responseElement) {
            responseElement.textContent = `🔄 Training ${modelType} for ${symbol}...`;
        }
        
        try {
            const response = await fetch(`/api/ml/train/${modelType}?symbol=${symbol}`, { 
                method: 'POST' 
            });
            const data = await response.json();
            
            if (responseElement) {
                if (data.status === 'success') {
                    responseElement.textContent = `✅ ${data.message}\nAccuracy: ${data.accuracy || 'N/A'}`;
                } else {
                    responseElement.textContent = '❌ ' + data.message;
                }
            }
        } catch (error) {
            if (responseElement) {
                responseElement.textContent = '❌ Error: ' + error.message;
            }
        }
    }
};

window.sendChatMessage = async function() {
    if (window.dashboard) await window.dashboard.sendChatMessage();
};

window.handleChatEnter = function(event) {
    if (event.key === 'Enter' && window.dashboard) {
        window.dashboard.sendChatMessage();
    }
};

// Initialize dashboard when page loads
document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 Initializing Trading Dashboard...');
    window.dashboard = new TradingDashboard();
    window.dashboard.startHeartbeat();
});
