# .env file

################################################################################
# IMPORTANT: DO NOT COMMIT THIS FILE TO PUBLIC VERSION CONTROL (e.g., GitHub) #
# This file contains sensitive API keys and personal credentials.              #
################################################################################


# --- APP METADATA ---
# Name of your trading bot shown on the dashboard.
# (If commented, the default "Industrial Trading Bot" from core/config.py will be used)
# APP_NAME="My OctoBot Trading Bot" 


# --- API KEYS & CREDENTIALS ---

# CoinMarketCap API Key (optional, for external market data reference)
# Get your FREE key from: https://coinmarketcap.com/api/
# REQUIRED if your bot code uses CoinMarketCap.
COINMARKETCAP_API_KEY=YOUR_COINMARKETCAP_API_KEY_HERE # <--- REPLACE THIS WITH YOUR ACTUAL KEY

# Alpaca API Credentials (for paper or live trading)
# Get your API keys from Alpaca: https://alpaca.markets/
# These are required if you want your bot to execute trades on Alpaca.
APCA_API_KEY_ID=PKXGUYUHP4WX3N8UJQQR     # <--- REPLACE THIS WITH YOUR ACTUAL KEY ID
APCA_API_SECRET_KEY=K3zxquPE1e6aJcgG1DUSvHXTdZq25FPRwum0XzsK # <--- REPLACE THIS WITH YOUR ACTUAL SECRET KEY
ALPACA_PAPER_BASE_URL=https://paper-api.alpaca.markets  # Base URL for paper trading. Change for live.

# CORRECTED: Removed double quotes. This is the stream URL for Alpaca Crypto data.
ALPACA_STREAM_DATA_URL=wss://stream.data.alpaca.markets/v1beta3/crypto/us

# Google AI (Generative AI) - Required for advanced chatbot features via Gemini
# Get your FREE API key from Google AI Studio: https://makersuite.google.com/
# If this is empty or invalid, the bot chat will default to basic hardcoded responses.
GOOGLE_AI_API_KEY=AIzaSyB0UGn1t_KCMnD4M2WnmsCAwivmLr2T134 # <--- YOUR ACTUAL GOOGLE AI KEY HERE
GOOGLE_AI_ENABLED=true                                 # <--- UNCOMMENTED AND ENSURED CORRECT NAME
# (If commented, the default 'gemini-pro' from core/config.py will be used)
# GOOGLE_AI_MODEL=gemini-pro                          


# --- GENERAL BOT SETTINGS ---

# Default crypto exchange for data fetching (e.g., 'binance', 'kraken', 'coinbase', 'bybit').
# This will be used by CryptoDataFetcher if not overridden here.
DEFAULT_EXCHANGE=kraken 

# Default path for saving ML models and scalers.
# (If commented, the default 'models/' from core/config.py will be used)
# DEFAULT_MODEL_SAVE_PATH=models/

# Control whether CCXT (real exchange data fetching) should be used.
# Set to 'false' (or comment out) to force demo data generation by CryptoDataFetcher.
# (If commented, defaults to true in core/config.py)
# CCXT_AVAILABLE=true 

# How often market data updates are broadcasted by the bot (in seconds).
# (If commented, the default '15' from core/config.py will be used)
# BROADCAST_INTERVAL_SECONDS=15 

# How long to wait after an error in background tasks before retrying (in seconds).
# (If commented, the default '30' from core/config.py will be used)
# ERROR_RETRY_INTERVAL_SECONDS=30 

# Directory where your strategy Python files are located.
# (If commented, the default 'strategies' from core/config.py will be used)
# STRATEGIES_DIR=strategies 

# How often to synchronize account balances and positions with Alpaca (in minutes).
# (If commented, the default '5' from core/config.py will be used)
# ALPACA_SYNC_INTERVAL_MINUTES=5 

# Default crypto pairs to fetch for training and real-time feed.
# (If commented, the default 'BTC/USD,ETH/USD,ADA/USD' from core/config.py will be used)
# IMPORTANT: Ensure these symbols are actually available on your chosen DEFAULT_EXCHANGE.
DEFAULT_TRAINING_SYMBOLS=BTC/USD,ETH/USD,ADA/USD 
# Example for USDC pairs on some exchanges: BTC/USDC,ETH/USDC,ADA/USDC


# Dashboard Authentication (for accessing the web interface)
# !!! CHANGE THESE FOR PRODUCTION USE !!! For security, these should be strong and unique.
APP_USER_ID=admin                       # <--- CHANGE THIS FOR PRODUCTION
APP_PASSWORD=admin123                   # <--- CHANGE THIS FOR PRODUCTION


# Debugging & Logging Levels
# (If commented, 'false' for DEBUG and 'INFO' for LOG_LEVEL from core/config.py will be used)
# DEBUG=true                            # Set to 'true' for more verbose output during development.
# LOG_LEVEL=INFO                        # Can be DEBUG, INFO, WARNING, ERROR, CRITICAL.


# --- NOTIFICATION SYSTEM CONFIGURATION ---
# Fill these in if you want external real-time notifications.
# If these are empty or invalid, notifications will only appear in bot's log files.

# SLACK NOTIFICATIONS
# Create an Incoming Webhook URL in your Slack workspace (https://api.slack.com/apps)
# SLACK_WEBHOOK_URL=REPLACE_WITH_YOUR_SLACK_WEBHOOK_URL_HERE # <--- REPLACE THIS
# SLACK_CHANNEL=#trading-bot            # <--- Optional: Set your desired Slack channel.
# SLACK_USERNAME=TradingBot             # <--- Optional: How the bot appears in Slack.

# Email Notifications (Gmail example. Requires Gmail App Password for SENDER_PASSWORD)
# See instructions to create App Password: https://support.google.com/accounts/answer/185833
# SMTP_SERVER=smtp.gmail.com            # <--- Common for Gmail. Change for other providers.
# SMTP_PORT=587                         # <--- Standard TLS port.
# SENDER_EMAIL=REPLACE_WITH_YOUR_EMAIL@gmail.com # <--- REPLACE WITH YOUR SENDER EMAIL
# SENDER_PASSWORD=REPLACE_WITH_YOUR_APP_PASSWORD # <--- REPLACE WITH YOUR GMAIL APP PASSWORD
# RECIPIENT_EMAIL=REPLACE_WITH_YOUR_EMAIL@gmail.com # <--- REPLACE WITH EMAIL TO RECEIVE NOTIFICATIONS

# Discord Notifications
# Create a Webhook URL in your Discord Server Settings -> Integrations -> Webhooks.
# DISCORD_WEBHOOK_URL=REPLACE_WITH_YOUR_DISCORD_WEBHOOK_URL_HERE # <--- REPLACE THIS

# Twilio SMS Notifications (Optional, requires a paid Twilio account and valid numbers)
# TWILIO_ACCOUNT_SID=REPLACE_WITH_YOUR_TWILIO_ACCOUNT_SID_HERE # <--- REPLACE THIS
# TWILIO_AUTH_TOKEN=YOUR_TWILIO_AUTH_TOKEN_HERE                 # <--- REPLACE THIS
# TWILIO_PHONE_NUMBER=YOUR_TWILIO_PHONE_NUMBER_HERE             # <--- REPLACE WITH YOUR TWILIO PHONE NUMBER (e.g., +1234567890)
# RECIPIENT_PHONE_NUMBER=YOUR_RECIPIENT_PHONE_NUMBER_HERE       # <--- REPLACE WITH PHONE NUMBER TO RECEIVE SMS (e.g., +1234456789)


# --- NOTIFICATION BEHAVIOR SETTINGS ---
# (If commented, the defaults from core/config.py will be used for all of these)

# NOTIFY_TRADES=true              # Set to 'false' to disable trade execution notifications.
# NOTIFY_SYSTEM_EVENTS=true       # Set to 'false' to disable bot startup/shutdown notifications.
# NOTIFY_ERRORS=true              # Set to 'false' to disable error notifications.
# NOTIFY_PERFORMANCE=true         # Set to 'false' to disable periodic performance reports.
# NOTIFY_STRATEGY_CHANGES=true    # Set to 'false' to disable notifications on strategy config changes.

# PERFORMANCE_NOTIFICATION_INTERVAL=3600 # How often to send performance notifications (seconds, default: 1 hour).
# ERROR_NOTIFICATION_COOLDOWN=300    # Minimum time between error notifications for the same error (seconds, default: 5 minutes).
# TRADE_NOTIFICATION_MIN_VALUE=10.0 # Minimum trade value (in base currency) for a notification to be sent (default: 10.0).

# MIN_NOTIFICATION_PRIORITY=MEDIUM # Only send notifications with this priority or higher.
#                                  # Options: DEBUG, INFO, MEDIUM, HIGH, CRITICAL, EMERGENCY.

# NOTIFICATION_HISTORY_MAX_LENGTH=100 # Maximum number of notifications to keep in memory for retrieval (default: 100).